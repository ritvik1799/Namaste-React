EPSIODE 1 :

 In this we learn basics of react.
 we use react using react cdn link.
 CDN - content Delivery Network
 Cross-origin 
 async-defer

---------------------------------------------------------------------------------

EPISODE 2 :

## In this we will create our own create react app.
 
-> npm init -> to initialize npm , we confifure npm here

## Now we install Bundler package "Parcel" , other Bundler available are webpack,viet etc.

 # Parcel
 - creating dev build
 - host it on localhost server
 - HMR : Hot Module Replacement (automatic refreshment on saving new changes)
 - File watching Algorithm : written in c++
 - Faster Build by Using Caching and create build of modified changes only. And it do all caching in .parcel-cache folder.
 - Image Optimization
 - Minification of files
 - Bundling of Files
 - compress the files
 - Differencial bundling - to support older browsers also
 - Support of host to HTTPS also
 - tree shaking : remove unused code from code 
 - Different dev and production bundle


-> npm install -D parcel  (telling package manager (npm) to install parcel as dev dependency (-D))

## when we install parcel we get a file package-lock.json and nod_modules too in project.

## if we don't have nod_modules but have package.json and package-lock.json file we can generate nod_modules using npm install that's
## why we need not to push nod_modules to github 

-> npm install 

## when we type npx parcel index.htm we execute parcel so it bundle our code using source file index.html and create build and host it
## on server localhost:1234.

-> npx parcel index.html

## we are installing react now using/from npm and we install it as normal dependency not dev dependency (-D)

-> npm install react
-> npm i react-dom

## we will create production Build now using :  (npx parcel index.html create development)

-> npx parcel build index.html

## "browserslist":[ "last 2 versions" ] this in package.json make or project compitable to work on last 2 vesrion of any browsers
## we can write also like "last 2 chrome versions" it implie that our project work fine in last 2 version of chrome surely
## don't sure about other browser version it may run or may not.

----------------------------------------------------------------------------------------------------------------------

EPISODE 3 : Laying The Foundation

## Till now we are using npx index.html or npx parcel build index.html to start project but from now onword we are going to use script
## tag to start project . we define script to start or build in package.json file under script attribute . suppose we define start tag
## with value parcel.index.html to start project so from now we have to write npm run start or a shortcut npm start (but thsi work only
##  for start not for other) to run our project instead of npx parcel index.html . This is industry standard.

## React.createElement create Object for us , at the end of the day react element is object when we render it using react dom it 
## become html. But it become very annoying and Clumsy so to avoid it we Use JSX.

## Suppose we have to create Create React element h1 using JSX so we have to write just :
## const heading = <h1>This is headin in JSX</h1>

## JSX : It's a javaScript syntax to create react element. it make developer life easy to create and use react element in convinent way.
## Jsx is not Html in js its syntax like html. ( React , JSX, HTML all are Different things)

## More about JSX :
## JSX is not a valid pure javaScript at the same time . Basically we say pure javaScript to that which can understood by js engine
## and js engine can understand es6/ECMAscript ,sp browser unable to understand JSX it give syntax error as "<" for this.
## so basically Our code is Transpiled into the code js engine can understand or browser can understand . and this conversion generally 
## done by bundlers so this transpiling is done by Parcel and Parcel didn.t do this it give this duty to pacakge known as "Babel".
## Babel is a javaScript compiler. so basicall it is responsible for taking our JSX code and Converting / transpiling it into code
## that browser / JS engine / react can understand.
## Working of JSX JSX code => React.createElement() => ReactElement-JS object => HtmlElemet(render)

## React Components : It's a common say that everything in react is a component
## Two way to create react component First one is Class based Components (OLD ONE) , Second one is Functional Components (NEW ONE)
## class base use javaScript classes to create react component and Functional component use javaScript Function to create Components.

## React Functional Components : it is just a javaScript Function. name should start from Capital letter. we can say react Functional
## component is a javaScript Function which return react element.
## we have to render react Components like root.render(<componentName/>). This is how babel understand that it is component.

## component Composition : composing two or more than two components into each other or adding component inside component 

------------------------------------------------------------------------------------------------------------------

EPISODE 4 : From This onward we are making a real world app

## Before making any app we should plan it properly it make development process easy.

## <React.Fragment></React.Fragment>` is a feature in React that allows you to return multiple elements from a React component by 
## allowing you to group a list of children without adding extra nodes to the DOM.
## <></>` is the shorthand tag for `React.Fragment`. The only difference between them is that the shorthand version does not 
## support the key attribute.

#### Example

## return (
        <React.Fragment>
            <Header />
            <Navigation />
            <Main />
            <Footer />
        </React.Fragment>
    );

## return (
        <>
            <Header />
            <Navigation />
            <Main />
            <Footer />
        </>
    );

## `Reconciliation` is the process through which React updates the Browser DOM and makes React work faster. React use 
## a `diffing algorithm` so that component updates are predictable and faster. React would first calculate the difference between 
## the real DOM and the copy of DOM (Virtual DOM) when there's an update of components.
## React stores a copy of Browser DOM which is called `Virtual DOM`. When we make changes or add data, React creates a new 
## Virtual DOM and compares it with the previous one. Comparison is done by `Diffing Algorithm`.
## React compares the Virtual DOM with Real DOM. It finds out the changed nodes and updates only the changed nodes in Real DOM 
## leaving the rest nodes as it is. This process is called Reconciliation.
## 
##                                  (or)
## 
## Reconciliation is the process by which React updates the UI to reflect changes in the component state. The reconciliation algorithm 
## is the set of rules that React uses to determine how to update the UI in the most efficient way possible. React uses a virtual 
## DOM (Document Object Model) to update the UI.

## React Fiber is a concept of ReactJS that is used to render a system faster, smoother and smarter.
## The Fiber reconciler, which became the default reconciler for React 16 and above, is a complete rewrite of React’s 
## reconciliation algorithm to solve some long-standing issues in React.
## Because Fiber is asynchronous, React can:
## 
## - Pause, resume, and restart rendering work on components as new updates come in
## - Reuse previously completed work and even abort it if not needed
## - Split work into chunks and prioritize tasks based on importance

## A `key` is a special attribute you need to include when creating lists of elements in React. Keys are used in React to identify 
## which items in the list are changed, updated, or deleted. In other words, we can say that keys are unique Identifier used to give 
## an identity to the elements in the lists.
## Keys should be given to the elements within the array to give the elements a stable identity.

## we can use index as key but its not recommended by react itself.

## Props : props stands for properties. Props are arguments passed into React components. props are used in React to pass data 
## from one component to another (from a parent component to a child component(s)). They are useful when you want the flow of data in 
## your app to be dynamic.

## DOM stands for `Document Object Model`, which represents your application UI and whenever the changes are made in the application, 
## this DOM gets updated and the user is able to visualize the changes. DOM is an interface that allows scripts to update the content, 
## style, and structure of the document.

## - `Virtual DOM`

##   - The Virtual DOM is a light-weight abstraction of the DOM. You can think of it as a copy of the DOM, that can be updated 
##     without affecting the actual DOM. It has all the same properties as the real DOM object, but doesn’t have the ability to 
##     write to the screen like the real DOM.
##   - Virtual DOM is just like a blueprint of a machine, can do the changes in the blueprint but those changes will not directly 
##     apply to the machine.
##   - Reconciliation is a process to compare and keep in sync the two files (Real and Virtual DOM). Diffing algorithm is a technique 
##     of reconciliation which is used by React.

## - `Real DOM`

##   - The DOM represents the web page often called a document with a logical tree and each branch of the tree ends in a node and 
##   each node contains object programmers can modify the content of the document using a scripting language like javascript and the 
##   changes and updates to the dom are fast because of its tree-like structure but after changes, the updated element and its children 
##   have to be re-rendered to update the application UI so the re-rendering of the UI which make the dom slow all the UI components you 
##   need to be rendered for every dom update so real dom would render the entire list and not only those item that receives the update .

-----------------------------------------------------------------------------------------------------------------------------------------

EPISODE 5 : Let's get Hooked

## ES6 provides us to import & export a module and use it in other files. ES6 provides two ways to export a module from a file: `named export` and `default export`.
## In `Named export`, one can have multiple named exports per file. Then import the specific exports they want surrounded in `{}` braces. The name of imported module has to be the same as the name of the exported module.
## In `Named export`, the component is exported from MyComponent.js file like:
## 
## ```
## export const MyComponent = () => {}
## export const MyComponent2 = () => {}
## ```
## 
## and the component is imported from MyComponent.js file like: here we must use `{}` in MyComponent.
## 
## ```
## // ex. importing a single named export
## import { MyComponent } from "./MyComponent";
## 
## // ex. importing multiple named exports
## import { MyComponent, MyComponent2 } from "./MyComponent";
## 
## // ex. giving a named import a different name by using "as":
## import { MyComponent2 as MyNewComponent } from "./MyComponent";

## In `Default export`, One can have only one default export per file. The naming of import is completely independent in default export and we can use any name we like.
## In `Default export`, the component is exported from MyComponent.js file like:
## 
## ```
## const MyComponent = () => {}
## export default MyComponent;
## ```
## 
## and the component is imported from MyComponent.js file like: here we must omit `{}` in MyComponent.
## 
## ```
## import MyComponent from "./MyComponent";
## ```
## 
## In `* as export`, it is used to import the whole module as a component and access the components inside the module.
## In `* as export`, the component is exported from MyComponent.js file like:
## 
## ```
## export const MyComponent = () => {}
## export const MyComponent2 = () => {}
## export const MyComponent3 = () => {}
## ```
## 
## and the component is imported from MyComponent.js file like:
## 
## ```
## import * as MainComponents from "./MyComponent";
## ```
## 
## Now we can use them in JSX as:
## 
## ```
## <MainComponents.MyComponent />
## <MainComponents.MyComponent2 />
## <MainComponents.MyComponent3 />
## ```
## 
## We can use `Named export` and `Default export` together. So you should export like:
## 
## ```
## export const MyComponent2 = () => {}
## const MyComponent = () => {}
## export default MyComponent;
## ```
## 
## and import like:
## 
## ```
## import MyComponent, {MyComponent2} from "./MyComponent";

## React Hooks are simple JavaScript functions that we can use to isolate the reusable part from a functional component. Hooks can be stateful and can manage side-effects.
## Hooks allow you to reuse stateful logic without changing your component hierarchy. This makes it easy to share Hooks among many components or with the community.

### React provides a bunch of standard in-built hooks:

## - useState: To manage states. Returns a stateful value and an updater function to update it.
## - useEffect: To manage side-effects like API calls, subscriptions, timers, mutations, and more.
## - useContext: To return the current value for a context.
## - useReducer: A useState alternative to help with complex state management.
## - useCallback: It returns a memorized version of a callback to help a child component not re-render unnecessarily.
## - useMemo: It returns a memoized value that helps in performance optimizations.
## - useRef: It returns a ref object with a current property. The ref object is mutable. It is mainly used to access a child component imperatively.
## - useLayoutEffect: It fires at the end of all DOM mutations. It's best to use useEffect as much as possible over this one as the useLayoutEffect fires synchronously.
## - useDebugValue: Helps to display a label in React DevTools for custom hooks.

## useState hook` is used to maintain the state in our React application. It keeps track of the state changes so basically useState 
## has the ability to encapsulate local state in a functional component.
## The useState hook is a special function that takes the `initial state` as an `argument` and `returns an array` of two entries. 
## UseState encapsulate only singular value from the state, for multiple state need to have useState calls.


----------------------------------------------------------------------------------------------------------------------------------

EPISODE 6 : Exploring the world

## `Microservice` - also known as the microservice architecture - is an architectural and organizational approach to software 
## development where software is composed of small independent services like database, server or a UI of the application, that 
## communicate over well-defined APIs. These services are owned by small, self-contained teams.
## Microservices architectures make applications easier to scale and faster to develop, enabling innovation and accelerating 
## time-to-market for new features.
## means we are dividing software into small, well-defined modules enables teams to use functions for multiple purposes.
## 
## - Benefits of Microservices:
##   - Flexible Scaling
##   - Easy Deployment
##   - Technological Freedom
##   - Reusable Code
##   - Resilience

## A `Monolith architecture` is a traditional model of a software program, which is built as a unified unit that is self-contained 
## and independent from other applications. A monolithic architecture is a singular, large computing network with one code base that 
## couples all of the business concerns together. To make a change to this sort of application requires updating the entire stack by 
## accessing the code base and building and deploying an updated version of the service-side interface. This makes updates restrictive 
## and time-consuming.
## means we are not dividing software into small, well-defined modules, we use every services like, database, server or a UI of the 
## application, in one Application file.

## With `monolithic architectures`, all processes are tightly coupled and run as a single service. This means that if one process 
## of the application experiences a spike in demand, the entire architecture must be scaled. Adding or improving a monolithic 
## application’s features becomes more complex as the code base grows. This complexity limits experimentation and makes it difficult 
## to implement new ideas. Monolithic architectures add risk for application availability because many dependent and tightly coupled 
## processes increase the impact of a single process failure.
## 
## With a `microservices architecture`, an application is built as independent components that run each application process as a 
## service. These services communicate via a well-defined interface using lightweight APIs. Services are built for business 
## capabilities and each service performs a single function. Because they are independently run, each service can be updated, 
## deployed, and scaled to meet demand for specific functions of an application.

## `useEffect Hook` is javascript function provided by `react`. The useEffect Hook allows you to `eliminate side effects` in your 
## components. Some examples of side effects are: `fetching API data`, `directly updating the DOM`, and `setting up subscriptions or 
## timers`, etc can be lead to unwarranted side-effects.
## useEffect accepts `two arguments`, a `callback function` and a `dependency array`. The second argument is optional.
## 
## ```
## useEffect(() => {}, [])
## ```
## 
## The `() => {}` is callback function and `[]` is called a empty dependency array.
## If anything that we pass (suppose currentState) inside the `[]` it trigger the callback function and changes the state of 
## the application.
## 
## ```
## useEffect(() => {
##     setCurrentState("true");
## }, [currentState])
## ```
## 
## If we do not pass empty dependency array then the useEffect runs everytime when the UI is rendered.
## 
## ```
## useEffect(() => {})

## `Optional Chaining` (`?.`) operator accesses an object's property or calls a function. If the object accessed or function called
##  is `undefined or null` , it returns `undefined` instead of throwing an error.
## `Optional Chaining` (`?.`) is good way of accessing the object keys, it prevents the application from being crashed if the 
## key that we are trying to access is not present. If the key is not present then instead of a throwing key error, 
## it returns `undefined`.

## `JS expression` returns a value that we use in the application. for example:
## 
## ```
## 1 + 2 // expresses
## "foo".toUpperCase() // expresses 'FOO'
## console.log(2) // logs '2'
## isTrue ? true : false // returns us a true or false value based on isTrue value
## ```
## 
## A `JS statement`, does not return a value. for example:
## 
## ```
## let x; // variable declaration
## if () { } // if condition
## ```
## 
## If we want to use `JS expression` in JSX, we have to wrap in `{/* expression slot */}` and if we want to use `JS statement` in JSX,
##  we have to wrap in `{(/* statement slot */)}`;

## `Conditional rendering` in React works the same way conditions work in `JavaScript`. Use JavaScript operators like `if` or 
## the `conditional operator` to create elements representing the current state, and let React update the UI to match them. for example:
## 
## ```
## // Using Ternary operator as a shorthand way or writing an if-else statement
## {isLoggedIn ? (return <UserGreeting />) : (return <GuestGreeting />)};
## // Using an if…else Statement
## {
##   (if (isLoggedIn) {
##     return <UserGreeting />;
##   }else {
##     return <GuestGreeting />;
##   })
## }
## // Using Logical &&
## {isLoggedIn && <button>Logout</button>}

## Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins 
## (domain, scheme, or port) other than its own from which a browser should permit loading resources.
## CORS defines a way in which a browser and server can interact to determine whether it is safe to allow the cross-origin request.

## `Async`: It simply allows us to write promises-based code as if it was synchronous and it checks that we are not breaking the 
## execution thread. It operates asynchronously via the event loop. Async functions will always return a promise. It makes sure that 
## a promise is returned and if it is not returned then JavaScript automatically wraps it in a promise which is resolved with its value.
## `Await`: Await function is used to wait for the promise. It could be used within the `async` block only. It makes the code wait 
## until the promise returns a result. It only makes the async block wait.
## for example:
## 
## ```
## // async function getRestaurant to fetch Swiggy API data
##   async function getRestaurants() {
##     const data = await fetch(
##       "Swiggy_API_URL"
##     );
##     const json = await data.json();
##     // we get the Swiggy API data in json format
##     console.log(json);
##   }

## The `data` object, returned by the `await fetch()`, is a generic placeholder for multiple data formats.
## so we can extract the `JSON object` from a `fetch` response by using `await data.json()`.
## `data.json()` is a method on the data object that lets you extract a `JSON object` from the data or response. The method 
## returns a promise because we have used `await` keyword.
## so `data.json()` returns a promise resolved to a `JSON object`.

